import org.gradle.plugins.ide.eclipse.model.*

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'license'

license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	ext.name = 'Steffen Schaefer'
	header rootProject.file('LICENSE')
}

repositories { mavenCentral() }

dependencies {
	compile gradleApi()
	testCompile group: 'junit', name: 'junit', version: '4.11'
}

tasks.withType(JavaCompile) {
	options.encoding = rootProject.encoding
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
}

javadoc {
	options {
		links 'http://www.gradle.org/docs/current/javadoc/', 'http://docs.oracle.com/javase/6/docs/api/'
	}
}

group='de.richsource.gradle.plugins'
version='0.7-SNAPSHOT'
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact javadocJar { classifier = 'javadoc' }
			artifact sourceJar { classifier = 'sources' }
			pom.withXml {
				def root = asNode()
				root.appendNode('packaging', 'jar')
				root.appendNode('name', 'Gradle GWT plugin')
				root.appendNode('description', 'Gradle plugin to support GWT related tasks.')
				root.appendNode('inceptionYear', '2013')
				root.appendNode('url', 'https://github.com/steffenschaefer/gwt-gradle-plugin')
				def license = root.appendNode('licenses').appendNode('license')
				license.appendNode('name', 'Apache License, Version 2.0')
				license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
				license.appendNode('distribution', 'repo')
				def scm = root.appendNode('scm')
				scm.appendNode('url', 'https://github.com/steffenschaefer/gwt-gradle-plugin')
				scm.appendNode('connection', 'scm:git:https://github.com/steffenschaefer/gwt-gradle-plugin.git')
			}
		}
	}
	repositories {
		maven {
			url new File(rootProject.projectDir, 'repo').toURI()
		}
	}
}

rootProject.tasks.publish.dependsOn project.tasks.publish

eclipse {
	classpath {
		file {
			whenMerged {Classpath cp ->
				String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
				String gradleSrc = "${gradleHome}/src"
				cp.entries.each {ClasspathEntry entry ->
					if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
						entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(gradleSrc)
					}
				}
			}
		}
	}
}